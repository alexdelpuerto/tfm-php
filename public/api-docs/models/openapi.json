{
  "openapi": "3.0.0",
  "info": {
    "title": "Trabajo de Fin de Master",
    "description": "Gestor de eventos y regalos",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Register a new user",
        "operationId": "api_user_register",
        "responses": {
          "201": {
            "description": "`Created` User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "`Bad Request` Username already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          },
          "description": "`User` properties to add to the system",
          "required": true
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login an existing user",
        "description": "Login an existing user",
        "operationId": "api_user_login",
        "responses": {
          "200": {
            "description": "`Ok` User loggued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` Incorrect username or password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "description": "`User` properties to log into the system",
          "required": true
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a user based on a single ID",
        "description": "Returns the user identified by `userId`.",
        "operationId": "api_user_getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user",
        "description": "Updates the user identified by `userId`.",
        "operationId": "api_user_put",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` User previously existed and is now updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "`Bad Request` Username already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          },
          "description": "`User` data to update",
          "required": true
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "description": "Deletes the user identified by `userId`.",
        "operationId": "api_user_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      },
      "options": {
        "tags": [
          "Users"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_user_optionsUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/search/{search}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users based on a search except the username actual",
        "description": "Returns a list of users based on a search except the username actual.",
        "operationId": "api_user_search",
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/users/friends/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of user friends based on the username",
        "description": "Returns a list of user friends based on the username.",
        "operationId": "api_user_getFriends",
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/friends/{friend}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a friend from the user based on the friendId and the userId",
        "description": "Delete a friend from the user based on the friendId and the userId.",
        "operationId": "api_user_deleteFriend",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/friend"
          }
        ],
        "responses": {
          "204": {
            "description": "Friend deleted"
          }
        }
      },
      "options": {
        "tags": [
          "Users"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_user_optionsFriend",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/friend"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/event/{eventId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users belonging to an event",
        "description": "Returns a list of users belonging to an event.",
        "operationId": "api_user_getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersArray"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Add a user to the event",
        "description": "Add a user to the event.",
        "operationId": "api_user_add",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` User previously existed and is now updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserID"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserID"
              }
            }
          },
          "description": "`User` data to update",
          "required": true
        }
      },
      "options": {
        "tags": [
          "Users"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_user_optionsUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Register a new event",
        "description": "Register a new event",
        "operationId": "api_event_post",
        "responses": {
          "201": {
            "description": "`Created` Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "`Bad Request` Creator does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "description": "`Event` properties to add to the system",
          "required": true
        }
      }
    },
    "/events/user/{userId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Returns all events from a user",
        "description": "Returns all events from a user",
        "operationId": "api_event_getEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EventsArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/EventsArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No events for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Returns an event based on a single ID",
        "description": "Returns the event identified by `eventId`.",
        "operationId": "api_event_getEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Updates an event",
        "description": "Updates the event identified by `eventId`.",
        "operationId": "api_event_put",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` Event previously existed and is now updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "description": "`Event` data to update",
          "required": true
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Deletes an event",
        "description": "Deletes the event identified by `eventId`.",
        "operationId": "api_event_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "204": {
            "description": "Event deleted"
          },
          "404": {
            "$ref": "#/components/responses/404_Resource_Not_Found_Response"
          }
        }
      },
      "options": {
        "tags": [
          "Events"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_event_options",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/gifts": {
      "post": {
        "tags": [
          "Gifts"
        ],
        "summary": "Register a new gift",
        "description": "Register a new gift",
        "operationId": "api_gift_post",
        "responses": {
          "201": {
            "description": "`Created` Gift created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              }
            }
          },
          "400": {
            "description": "`Bad Request` Event does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Gift"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Gift"
              }
            }
          },
          "description": "`Gift` properties to add to the system",
          "required": true
        }
      }
    },
    "/gifts/event/{eventId}": {
      "get": {
        "tags": [
          "Gifts"
        ],
        "summary": "Returns all gifts from an event",
        "description": "Returns all gifts from an event",
        "operationId": "api_gift_getGifts",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiftsArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GiftsArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/GiftsArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No gifts for this event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/gifts/{giftId}": {
      "get": {
        "tags": [
          "Gifts"
        ],
        "summary": "Returns a gift based on a single ID",
        "description": "Returns the gift identified by `giftId`.",
        "operationId": "api_gift_getGift",
        "parameters": [
          {
            "$ref": "#/components/parameters/giftId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Gifts"
        ],
        "summary": "Updates a gift",
        "description": "Updates the gift identified by `giftId`.",
        "operationId": "api_gift_put",
        "parameters": [
          {
            "$ref": "#/components/parameters/giftId"
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` Gift previously existed and is now updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Gift"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Gift"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Gift"
              }
            }
          },
          "description": "`Gift` data to update",
          "required": true
        }
      },
      "delete": {
        "tags": [
          "Gifts"
        ],
        "summary": "Deletes a gift",
        "description": "Deletes the gift identified by `giftId`.",
        "operationId": "api_gift_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/giftId"
          }
        ],
        "responses": {
          "204": {
            "description": "Gift deleted"
          },
          "404": {
            "$ref": "#/components/responses/404_Resource_Not_Found_Response"
          }
        }
      },
      "options": {
        "tags": [
          "Gifts"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_gift_options",
        "parameters": [
          {
            "$ref": "#/components/parameters/giftId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Register a new gift payment",
        "description": "Register a new gift payment",
        "operationId": "api_payment_post",
        "responses": {
          "201": {
            "description": "`Created` Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "description": "`Payment` properties to add to the system",
          "required": true
        }
      }
    },
    "/paymentsCol/{username}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Returns all collections from a user",
        "description": "Returns all collections from a user",
        "operationId": "api_payment_getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No collections for this username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/payments/{username}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Returns all payments from a user",
        "description": "Returns all payments from a user",
        "operationId": "api_payment_getPayments",
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No payments for this username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/payments/{paymentId}": {
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Deletes a payment",
        "description": "Deletes the payment identified by `paymentId`.",
        "operationId": "api_payment_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment deleted"
          }
        }
      },
      "options": {
        "tags": [
          "Payments"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_payment_options",
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/requests": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Register a new friend request",
        "description": "Register a new friend request",
        "operationId": "api_request_post",
        "responses": {
          "201": {
            "description": "`Created` Request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            }
          },
          "400": {
            "description": "`Bad request` The request already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            }
          },
          "description": "`Request` properties to add to the system",
          "required": true
        }
      }
    },
    "/requests/{username}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Returns all requests from a username",
        "description": "Returns all requests from a username",
        "operationId": "api_request_get",
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "`Ok`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestsArray"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestsArray"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestsArray"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` No requests for this username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/requests/accept": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Accept a friend request",
        "description": "Accept a friend request",
        "operationId": "api_request_accept",
        "responses": {
          "201": {
            "description": "`Created` Request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            }
          },
          "404": {
            "description": "`Not Found` The user does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/x-yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            }
          },
          "description": "`Request` properties to add to the system",
          "required": true
        }
      }
    },
    "/requests/{requestId}": {
      "delete": {
        "tags": [
          "Requests"
        ],
        "summary": "Cancel a request",
        "description": "Cancel the request identified by `requestId`.",
        "operationId": "api_request_cancel",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestId"
          }
        ],
        "responses": {
          "204": {
            "description": "Request canceled"
          }
        }
      },
      "options": {
        "tags": [
          "Requests"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "api_request_options",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header ",
            "headers": {
              "allow": {
                "description": "List of HTTP supported methods",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "User management"
    },
    {
      "name": "Events",
      "description": "Events management"
    },
    {
      "name": "Gifts",
      "description": "Gifts management"
    },
    {
      "name": "Payments",
      "description": "Payments management"
    },
    {
      "name": "Requests",
      "description": "Friend requests"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000/api/v1"
    },
    {
      "url": "https://localhost:8000/api/v1"
    }
  ],
  "components": {
    "parameters": {
      "userId": {
        "name": "userId",
        "in": "path",
        "description": "ID of user",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "username": {
        "name": "username",
        "in": "path",
        "description": "username",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "search": {
        "name": "search",
        "in": "path",
        "description": "a string to search",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "friend": {
        "name": "friend",
        "in": "path",
        "description": "ID of a friend",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "eventId": {
        "name": "eventId",
        "in": "path",
        "description": "ID of event",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "giftId": {
        "name": "giftId",
        "in": "path",
        "description": "ID of gift",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "paymentId": {
        "name": "paymentId",
        "in": "path",
        "description": "ID of payment",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "requestId": {
        "name": "requestId",
        "in": "path",
        "description": "ID of request",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "responses": {
      "404_Resource_Not_Found_Response": {
        "description": "`Not found` resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "application/x-yaml": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "id": {
            "description": "User Id",
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "name": {
            "description": "User name",
            "type": "string"
          },
          "surname": {
            "description": "User surname",
            "type": "string"
          }
        },
        "example": {
          "user": {
            "username": "username",
            "password": "pass",
            "name": "name",
            "surname": "surname"
          }
        }
      },
      "UserData": {
        "properties": {
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "name": {
            "description": "User name",
            "type": "string"
          },
          "surname": {
            "description": "User surname",
            "type": "string"
          }
        },
        "example": {
          "username": "username",
          "password": "pass",
          "name": "name",
          "surname": "surname"
        }
      },
      "UserLogin": {
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          }
        },
        "example": {
          "user": {
            "username": "username",
            "password": "pass"
          }
        }
      },
      "UsersArray": {
        "properties": {
          "users": {
            "description": "Users array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserID": {
        "properties": {
          "id": {
            "description": "id",
            "type": "integer",
            "format": "int32"
          }
        },
        "example": {
          "id": 5
        }
      },
      "Event": {
        "required": [
          "name",
          "budget",
          "creator"
        ],
        "properties": {
          "id": {
            "description": "Event Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Event name",
            "type": "string"
          },
          "budget": {
            "description": "Event budget",
            "type": "number"
          },
          "creator": {
            "description": "Event creator",
            "type": "string"
          }
        },
        "example": {
          "event": {
            "name": "event",
            "budget": 20.6,
            "creator": "user"
          }
        }
      },
      "EventsArray": {
        "properties": {
          "events": {
            "description": "Events array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "Gift": {
        "required": [
          "name",
          "price",
          "eventId"
        ],
        "properties": {
          "id": {
            "description": "Gift Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Gift name",
            "type": "string"
          },
          "description": {
            "description": "Gift description",
            "type": "string"
          },
          "price": {
            "description": "Gift price",
            "type": "number"
          },
          "bought": {
            "description": "Gift boolean",
            "type": "boolean"
          },
          "eventId": {
            "description": "event",
            "type": "integer",
            "format": "int32"
          }
        },
        "example": {
          "gift": {
            "name": "gift",
            "description": "description",
            "price": 2.6,
            "bought": false,
            "eventId": 2
          }
        }
      },
      "GiftsArray": {
        "properties": {
          "gifts": {
            "description": "Gifts array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gift"
            }
          }
        }
      },
      "Payment": {
        "required": [
          "buyer",
          "person",
          "giftName",
          "price"
        ],
        "properties": {
          "id": {
            "description": "Payment Id",
            "type": "integer",
            "format": "int32"
          },
          "buyer": {
            "description": "Buyer of the gift",
            "type": "string"
          },
          "person": {
            "description": "User that has to pay",
            "type": "string"
          },
          "giftName": {
            "description": "Gift name",
            "type": "string"
          },
          "price": {
            "description": "Payment price",
            "type": "number"
          }
        },
        "example": {
          "payment": {
            "buyer": "user1",
            "person": "user2",
            "giftName": "gift",
            "price": 2.2
          }
        }
      },
      "PaymentsArray": {
        "properties": {
          "payments": {
            "description": "Payments array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "Request": {
        "required": [
          "userSend",
          "userReceive"
        ],
        "properties": {
          "id": {
            "description": "Request Id",
            "type": "integer",
            "format": "int32"
          },
          "userSend": {
            "description": "User that sends the request",
            "type": "string"
          },
          "userReceive": {
            "description": "User that receive the request",
            "type": "string"
          }
        },
        "example": {
          "request": {
            "userSend": "user1",
            "userReceive": "user2"
          }
        }
      },
      "RequestsArray": {
        "properties": {
          "requests": {
            "description": "Requests array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request"
            }
          }
        }
      },
      "Message": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "Response code",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          }
        },
        "example": {
          "message": {
            "code": "HTTP code",
            "message": "Response Message"
          }
        }
      }
    }
  }
}